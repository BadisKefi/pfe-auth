// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  label               String
  price               Float
  images              String[]
  description         String
  detailedDescription String
  informations        String
  Category            Category? @relation(fields: [categoryId], references: [id])
  categoryId          String?   @db.ObjectId
}

model Category {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  label               String
  image               String
  description         String
  detailedDescription String
  prodcuts            Product[]
}

// ///////////

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorAnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorsToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
